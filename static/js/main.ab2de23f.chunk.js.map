{"version":3,"sources":["services/api.js","pages/main/index.js","pages/product/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["api","Axios","create","baseURL","Main","state","products","productInfo","page","loadProducts","_callee","response","_response$data","docs","_args","arguments","regenerator_default","a","wrap","_context","prev","next","length","undefined","get","concat","sent","data","Object","objectWithoutProperties","_this","setState","stop","prevPage","pageNumber","nextPage","_this$state","pages","this","_this$state2","react_default","createElement","className","map","product","key","_id","title","description","react_router_dom","to","disabled","onClick","Component","Product","id","props","match","params","Api","href","url","Routes","react_router","path","exact","component","Header","App","components_Header","routes","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab2de23f.chunk.js","sourcesContent":["import Axios from 'axios';\r\n\r\nconst api = Axios.create({\r\n    baseURL: 'https://rocketseat-node.herokuapp.com/api'\r\n})\r\n\r\nexport default api;","import React, { Component } from 'react';\r\n\r\nimport api from \"../../services/api\"\r\n\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport \"./style.css\"\r\n\r\n\r\nexport default class Main extends Component {\r\n\r\n    state = {\r\n        products: [],\r\n        productInfo: {},\r\n        page: 1\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadProducts();\r\n    }\r\n\r\n    loadProducts = async (page = 1) => {\r\n        const response = await api.get(`/products?page=${page}`);\r\n\r\n        const { docs, ...productInfo } = response.data\r\n\r\n        this.setState({\r\n            products: docs,\r\n            productInfo,\r\n            page\r\n        })\r\n    };\r\n\r\n    prevPage = () => {\r\n        const { page} = this.state;\r\n\r\n        if (page === 1) return;\r\n\r\n        const pageNumber = page - 1;\r\n\r\n        this.loadProducts(pageNumber);\r\n    }\r\n\r\n    nextPage = () => {\r\n        const { page, productInfo } = this.state;\r\n\r\n        if (page === productInfo.pages) return;\r\n\r\n        const pageNumber = page + 1;\r\n\r\n        this.loadProducts(pageNumber);\r\n    }\r\n\r\n    render() {\r\n        const { products, page, productInfo } = this.state;\r\n\r\n        return (\r\n            <div className=\"product-list\">\r\n                {products.map(product => (\r\n                    <article key={product._id}>\r\n                        <strong>{product.title}</strong>\r\n                        <p>{product.description}</p>\r\n                        <Link to={`/products/${product._id}`}>Ler mais</Link>\r\n                    </article>\r\n                ))}\r\n                <div className=\"actions\">\r\n                    <button disabled={page === 1} onClick={this.prevPage}>Anterior</button>\r\n                    <button disabled={page === productInfo.pages} onClick={this.nextPage}>proximo</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Api from \"../../services/api\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport default class Product extends Component{\r\n    state = {\r\n        product: {},\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const {id} = this.props.match.params;\r\n        const response = await Api.get(`/HuntWeb-ReactJs-RocketSeat/products/${id}`);\r\n        this.setState({ product: response.data})\r\n    }\r\n    render(){\r\n        const {product} = this.state\r\n\r\n        return (\r\n            <div className=\"product-info\">\r\n                <h1>{product.title}</h1>\r\n                <p>{product.description}</p>\r\n                <p>\r\n                    URL: <a href={product.url}>{product.url}</a>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react'\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Main from \"./pages/main\";\r\nimport Product from './pages/product';\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/HuntWeb-ReactJs-RocketSeat/\" exact component={Main} />\r\n            <Route path=\"/HuntWeb-ReactJs-RocketSeat/products/:id\" component={Product} />\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;","import React, {Component} from 'react';\r\nimport \"./style.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Routes from \"../../routes.js\"\r\n\r\nconst Header = () => (\r\n    \r\n    <header id=\"main-header\"> \r\n        <a href=\"/\">\r\n        JSHunt \r\n        </a>\r\n    </header>\r\n    \r\n);\r\n\r\nexport default Header;","import React from 'react';\nimport Routes from \"./routes\";\n\nimport \"./style.css\";\n\nimport Header from './components/Header';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}